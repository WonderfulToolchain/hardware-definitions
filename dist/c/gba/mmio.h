// SPDX-License-Identifier: CC0-1.0
//
// Auto-generated by hardware-definitions/generate.py on 2025-06-14 15:18
#include <stdint.h>

#ifndef GBA_MMIO_H_
#define GBA_MMIO_H_

/**
 * @addtogroup hardware_dma Hardware defines - Timer MMIO
 * @{
 */

#define GBA_DMA_SRC(x) (*((volatile uint32_t*) ((0x40000B0) + (12 * (x))))

#define GBA_DMA_DST(x) (*((volatile uint32_t*) ((0x40000B4) + (12 * (x))))

#define GBA_DMA_LEN(x) (*((volatile uint16_t*) ((0x40000B8) + (12 * (x))))

#define GBA_DMA_CNT(x) (*((volatile uint16_t*) ((0x40000BA) + (12 * (x))))
#define GBA_DMA_CNT_DST_INC 0x00
#define GBA_DMA_CNT_DST_DEC 0x20
#define GBA_DMA_CNT_DST_FIX 0x40
#define GBA_DMA_CNT_DST_RELOAD 0x60
#define GBA_DMA_CNT_DST_SHIFT 5
#define GBA_DMA_CNT_DST_MASK 0x60
#define GBA_DMA_CNT_SRC_INC 0x00
#define GBA_DMA_CNT_SRC_DEC 0x80
#define GBA_DMA_CNT_SRC_FIX 0x100
#define GBA_DMA_CNT_SRC_SHIFT 7
#define GBA_DMA_CNT_SRC_MASK 0x180
#define GBA_DMA_CNT_REPEAT 0x200
#define GBA_DMA_CNT_WIDTH_16BIT 0x00
#define GBA_DMA_CNT_WIDTH_32BIT 0x400
#define GBA_DMA_CNT_WIDTH_SHIFT 10
#define GBA_DMA_CNT_WIDTH_MASK 0x400
#define GBA_DMA_CNT_CART_DRQ 0x800
#define GBA_DMA_CNT_START_NOW 0x00
#define GBA_DMA_CNT_START_VBLANK 0x1000
#define GBA_DMA_CNT_START_HBLANK 0x2000
/**
 * Start on sound DMA request (channels 1/2 only).
 */
#define GBA_DMA_CNT_START_SOUND 0x3000
#define GBA_DMA_CNT_START_VIDEO 0x3000
#define GBA_DMA_CNT_START_SHIFT 12
#define GBA_DMA_CNT_START_MASK 0x3000
/**
 * Request interrupt on transfer completion
 */
#define GBA_DMA_CNT_IRQ 0x4000
#define GBA_DMA_CNT_ENABLE 0x8000

#define GBA_DMA0SRC (*((volatile uint32_t*) 0x40000B0))

#define GBA_DMA0DST (*((volatile uint32_t*) 0x40000B4))

#define GBA_DMA0LEN (*((volatile uint16_t*) 0x40000B8))

#define GBA_DMA0CNT (*((volatile uint16_t*) 0x40000BA))

#define GBA_DMA1SRC (*((volatile uint32_t*) 0x40000BC))

#define GBA_DMA1DST (*((volatile uint32_t*) 0x40000C0))

#define GBA_DMA1LEN (*((volatile uint16_t*) 0x40000C4))

#define GBA_DMA1CNT (*((volatile uint16_t*) 0x40000C6))

#define GBA_DMA2SRC (*((volatile uint32_t*) 0x40000C8))

#define GBA_DMA2DST (*((volatile uint32_t*) 0x40000CC))

#define GBA_DMA2LEN (*((volatile uint16_t*) 0x40000D0))

#define GBA_DMA2CNT (*((volatile uint16_t*) 0x40000D2))

#define GBA_DMA3SRC (*((volatile uint32_t*) 0x40000D4))

#define GBA_DMA3DST (*((volatile uint32_t*) 0x40000D8))

#define GBA_DMA3LEN (*((volatile uint16_t*) 0x40000DC))

#define GBA_DMA3CNT (*((volatile uint16_t*) 0x40000DE))

/**@}*/

/**
 * @addtogroup hardware_interrupt Hardware defines - Interrupt MMIO
 * @{
 */

/**
 * Interrupt main enable - enable or disable all interrupts.
 */
#define GBA_SOC_IME (*((volatile uint32_t*) 0x4000208))

/**
 * Interrupt enable mask
 */
#define GBA_SOC_IE (*((volatile uint16_t*) 0x4000200))
#define GBA_SOC_IE_LCD_VBLANK 0x01
#define GBA_SOC_IE_LCD_HBLANK 0x02
#define GBA_SOC_IE_LCD_VCOUNT 0x04
#define GBA_SOC_IE_TIMER0 0x08
#define GBA_SOC_IE_TIMER1 0x10
#define GBA_SOC_IE_TIMER2 0x20
#define GBA_SOC_IE_TIMER3 0x40
#define GBA_SOC_IE_SIO 0x80
#define GBA_SOC_IE_DMA0 0x100
#define GBA_SOC_IE_DMA1 0x200
#define GBA_SOC_IE_DMA2 0x400
#define GBA_SOC_IE_DMA3 0x800
#define GBA_SOC_IE_KEY 0x1000
/**
 * IRQ signal on cartridge
 */
#define GBA_SOC_IE_CART 0x2000

/**
 * Interrupt flags
 */
#define GBA_SOC_IF (*((volatile uint16_t*) 0x4000202))
#define GBA_SOC_IF_LCD_VBLANK 0x01
#define GBA_SOC_IF_LCD_HBLANK 0x02
#define GBA_SOC_IF_LCD_VCOUNT 0x04
#define GBA_SOC_IF_TIMER0 0x08
#define GBA_SOC_IF_TIMER1 0x10
#define GBA_SOC_IF_TIMER2 0x20
#define GBA_SOC_IF_TIMER3 0x40
#define GBA_SOC_IF_SIO 0x80
#define GBA_SOC_IF_DMA0 0x100
#define GBA_SOC_IF_DMA1 0x200
#define GBA_SOC_IF_DMA2 0x400
#define GBA_SOC_IF_DMA3 0x800
#define GBA_SOC_IF_KEY 0x1000
/**
 * IRQ signal on cartridge
 */
#define GBA_SOC_IF_CART 0x2000

/**@}*/

/**
 * @addtogroup hardware_key Hardware defines - Keypad MMIO
 * @{
 */

#define GBA_KEY_INPUT (*((volatile uint16_t*) 0x4000130))
#define GBA_KEY_INPUT_A 0x01
#define GBA_KEY_INPUT_B 0x02
#define GBA_KEY_INPUT_SELECT 0x04
#define GBA_KEY_INPUT_START 0x08
#define GBA_KEY_INPUT_RIGHT 0x10
#define GBA_KEY_INPUT_LEFT 0x20
#define GBA_KEY_INPUT_UP 0x40
#define GBA_KEY_INPUT_DOWN 0x80
#define GBA_KEY_INPUT_R 0x100
#define GBA_KEY_INPUT_L 0x200

#define GBA_KEY_IRQ (*((volatile uint16_t*) 0x4000130))
#define GBA_KEY_IRQ_A 0x01
#define GBA_KEY_IRQ_B 0x02
#define GBA_KEY_IRQ_SELECT 0x04
#define GBA_KEY_IRQ_START 0x08
#define GBA_KEY_IRQ_RIGHT 0x10
#define GBA_KEY_IRQ_LEFT 0x20
#define GBA_KEY_IRQ_UP 0x40
#define GBA_KEY_IRQ_DOWN 0x80
#define GBA_KEY_IRQ_R 0x100
#define GBA_KEY_IRQ_L 0x200
#define GBA_KEY_IRQ_ENABLE 0x4000
/**
 * Logical OR: Any masked button being pressed requests interrupt
 */
#define GBA_KEY_IRQ_LOGIC_OR 0x00
/**
 * Logical AND: All masked buttons being pressed requests interrupt
 */
#define GBA_KEY_IRQ_LOGIC_AND 0x8000
#define GBA_KEY_IRQ_LOGIC_SHIFT 15
#define GBA_KEY_IRQ_LOGIC_MASK 0x8000

/**@}*/

/**
 * @addtogroup hardware_lcd Hardware defines - LCD MMIO
 * @{
 */

#define GBA_LCD_DISPCNT (*((volatile uint32_t*) 0x4000000))
/**
 * Mode 0: four tile layers (0-3)
 */
#define GBA_LCD_DISPCNT_MODE_0 0x00
/**
 * Mode 1: two tile layers (0-1), one affine layer (2)
 */
#define GBA_LCD_DISPCNT_MODE_1 0x01
/**
 * Mode 2: two affine layers (2-3)
 */
#define GBA_LCD_DISPCNT_MODE_2 0x02
/**
 * Mode 3: one 240x160 15-bit bitmap (2)
 */
#define GBA_LCD_DISPCNT_MODE_3 0x03
/**
 * Mode 4: two 240x160 8-bit bitmaps (2)
 */
#define GBA_LCD_DISPCNT_MODE_4 0x04
/**
 * Mode 5: two 160x128 15-bit bitmaps (2)
 */
#define GBA_LCD_DISPCNT_MODE_5 0x05
#define GBA_LCD_DISPCNT_MODE_SHIFT 0
#define GBA_LCD_DISPCNT_MODE_MASK 0x07
#define GBA_LCD_DISPCNT_CGB_MODE 0x08
/**
 * Use second bitmap (modes 4, 5)
 */
#define GBA_LCD_DISPCNT_ALT_BITMAP 0x10
#define GBA_LCD_DISPCNT_OBJ_LAYOUT_1D 0x40
#define GBA_LCD_DISPCNT_OBJ_LAYOUT_2D 0x00
#define GBA_LCD_DISPCNT_OBJ_LAYOUT_SHIFT 6
#define GBA_LCD_DISPCNT_OBJ_LAYOUT_MASK 0x40
/**
 * Enable background layer 0
 */
#define GBA_LCD_DISPCNT_BG0_ENABLE 0x100
/**
 * Enable background layer 1
 */
#define GBA_LCD_DISPCNT_BG1_ENABLE 0x200
/**
 * Enable background layer 2
 */
#define GBA_LCD_DISPCNT_BG2_ENABLE 0x400
/**
 * Enable background layer 3
 */
#define GBA_LCD_DISPCNT_BG3_ENABLE 0x800
/**
 * Enable object layer
 */
#define GBA_LCD_DISPCNT_OBJ_ENABLE 0x1000
/**
 * Enable background window 0
 */
#define GBA_LCD_DISPCNT_WIN0_ENABLE 0x2000
/**
 * Enable background window 1
 */
#define GBA_LCD_DISPCNT_WIN1_ENABLE 0x4000
/**
 * Enable object window
 */
#define GBA_LCD_DISPCNT_OBJWIN_ENABLE 0x8000
/**
 * Enable stereoscopic mode
 */
#define GBA_LCD_DISPCNT_STEREO_ENABLE 0x10000

#define GBA_LCD_DISPSTAT (*((volatile uint16_t*) 0x4000004))
#define GBA_LCD_DISPSTAT_VBLANK 0x01
#define GBA_LCD_DISPSTAT_HBLANK 0x02
#define GBA_LCD_DISPSTAT_VCOUNT 0x04
#define GBA_LCD_DISPSTAT_VBLANK_ENABLE 0x08
#define GBA_LCD_DISPSTAT_HBLANK_ENABLE 0x10
#define GBA_LCD_DISPSTAT_VCOUNT_ENABLE 0x20

/**
 * Currently drawn scanline
 */
#define GBA_LCD_VCOUNT (*((volatile uint16_t*) 0x4000006))

#define GBA_LCD_BGCNT (*((volatile uint16_t(*)[4]) 0x4000008))
#define GBA_LCD_BGCNT_MOSAIC 0x40
/**
 * 4 bits per pixel; 16 palettes of 16 colors each.
 */
#define GBA_LCD_BGCNT_DEPTH_4BPP 0x00
/**
 * 8 bits per pixel; 1 palette of 256 colors.
 */
#define GBA_LCD_BGCNT_DEPTH_8BPP 0x00
#define GBA_LCD_BGCNT_DEPTH_SHIFT 7
#define GBA_LCD_BGCNT_DEPTH_MASK 0x80
#define GBA_LCD_BGCNT_AFFINE_WRAP 0x2000
/**
 * Tile background layer size: 32x32 tiles (256x256 pixels, 2 KiB)
 */
#define GBA_LCD_BGCNT_TILE_SIZE_32_32 0x00
/**
 * Tile background layer size: 64x32 tiles (512x256 pixels, 4 KiB)
 */
#define GBA_LCD_BGCNT_TILE_SIZE_64_32 0x4000
/**
 * Tile background layer size: 32x64 tiles (256x512 pixels, 4 KiB)
 */
#define GBA_LCD_BGCNT_TILE_SIZE_32_64 0x8000
/**
 * Tile background layer size: 64x64 tiles (512x512 pixels, 8 KiB)
 */
#define GBA_LCD_BGCNT_TILE_SIZE_64_64 0xC000
#define GBA_LCD_BGCNT_TILE_SIZE_SHIFT 14
#define GBA_LCD_BGCNT_TILE_SIZE_MASK 0xC000
/**
 * Affine background layer size: 16x16 tiles (128x128 pixels, 0.5 KiB)
 */
#define GBA_LCD_BGCNT_AFFINE_SIZE_256_256 0x00
/**
 * Affine background layer size: 32x32 tiles (256x256 pixels, 2 KiB)
 */
#define GBA_LCD_BGCNT_AFFINE_SIZE_512_256 0x4000
/**
 * Affine background layer size: 64x64 tiles (512x512 pixels, 8 KiB)
 */
#define GBA_LCD_BGCNT_AFFINE_SIZE_256_512 0x8000
/**
 * Affine background layer size: 128x128 tiles (1024x1024 pixels, 32 KiB)
 */
#define GBA_LCD_BGCNT_AFFINE_SIZE_512_512 0xC000
#define GBA_LCD_BGCNT_AFFINE_SIZE_SHIFT 14
#define GBA_LCD_BGCNT_AFFINE_SIZE_MASK 0xC000

#define GBA_LCD_BG0CNT (*((volatile uint16_t*) 0x4000008))

#define GBA_LCD_BG1CNT (*((volatile uint16_t*) 0x400000A))

#define GBA_LCD_BG2CNT (*((volatile uint16_t*) 0x400000C))

#define GBA_LCD_BG3CNT (*((volatile uint16_t*) 0x400000E))

#define GBA_LCD_BG_XOFS(x) (*((volatile uint16_t*) ((0x4000010) + (4 * (x))))

#define GBA_LCD_BG_YOFS(x) (*((volatile uint16_t*) ((0x4000012) + (4 * (x))))

#define GBA_LCD_BG0XOFS (*((volatile uint16_t*) 0x4000010))

#define GBA_LCD_BG0YOFS (*((volatile uint16_t*) 0x4000012))

#define GBA_LCD_BG1XOFS (*((volatile uint16_t*) 0x4000014))

#define GBA_LCD_BG1YOFS (*((volatile uint16_t*) 0x4000016))

#define GBA_LCD_BG2XOFS (*((volatile uint16_t*) 0x4000018))

#define GBA_LCD_BG2YOFS (*((volatile uint16_t*) 0x400001A))

#define GBA_LCD_BG3XOFS (*((volatile uint16_t*) 0x400001C))

#define GBA_LCD_BG3YOFS (*((volatile uint16_t*) 0x400001E))

#define GBA_LCD_BG2PA (*((volatile uint16_t*) 0x4000020))

#define GBA_LCD_BG2PB (*((volatile uint16_t*) 0x4000022))

#define GBA_LCD_BG2PC (*((volatile uint16_t*) 0x4000024))

#define GBA_LCD_BG2PD (*((volatile uint16_t*) 0x4000026))

#define GBA_LCD_BG2PX (*((volatile uint32_t*) 0x4000028))

#define GBA_LCD_BG2PY (*((volatile uint32_t*) 0x400002C))

#define GBA_LCD_BG3PA (*((volatile uint16_t*) 0x4000030))

#define GBA_LCD_BG3PB (*((volatile uint16_t*) 0x4000032))

#define GBA_LCD_BG3PC (*((volatile uint16_t*) 0x4000034))

#define GBA_LCD_BG3PD (*((volatile uint16_t*) 0x4000036))

#define GBA_LCD_BG3PX (*((volatile uint32_t*) 0x4000038))

#define GBA_LCD_BG3PY (*((volatile uint32_t*) 0x400003C))

#define GBA_LCD_WIN0X (*((volatile uint16_t*) 0x4000040))

#define GBA_LCD_WIN0X1 (*((volatile uint8_t*) 0x4000041))

#define GBA_LCD_WIN0X2 (*((volatile uint8_t*) 0x4000040))

#define GBA_LCD_WIN1X (*((volatile uint16_t*) 0x4000042))

#define GBA_LCD_WIN1X1 (*((volatile uint8_t*) 0x4000043))

#define GBA_LCD_WIN1X2 (*((volatile uint8_t*) 0x4000042))

#define GBA_LCD_WIN0Y (*((volatile uint16_t*) 0x4000044))

#define GBA_LCD_WIN0Y1 (*((volatile uint8_t*) 0x4000045))

#define GBA_LCD_WIN0Y2 (*((volatile uint8_t*) 0x4000044))

#define GBA_LCD_WIN1Y (*((volatile uint16_t*) 0x4000046))

#define GBA_LCD_WIN1Y1 (*((volatile uint8_t*) 0x4000047))

#define GBA_LCD_WIN1Y2 (*((volatile uint8_t*) 0x4000046))

#define GBA_LCD_WINCNT (*((volatile uint32_t*) 0x4000048))
#define GBA_LCD_WINCNT_BG0_ENABLE 0x01
#define GBA_LCD_WINCNT_BG1_ENABLE 0x02
#define GBA_LCD_WINCNT_BG2_ENABLE 0x04
#define GBA_LCD_WINCNT_BG3_ENABLE 0x08
#define GBA_LCD_WINCNT_OBJ_ENABLE 0x10
#define GBA_LCD_WINCNT_BLEND_ENABLE 0x20

#define GBA_LCD_WININ0CNT (*((volatile uint8_t*) 0x4000048))

#define GBA_LCD_WININ1CNT (*((volatile uint8_t*) 0x4000049))

#define GBA_LCD_WINOBJCNT (*((volatile uint8_t*) 0x400004A))

#define GBA_LCD_WINOUTCNT (*((volatile uint8_t*) 0x400004B))

#define GBA_LCD_MOSAIC (*((volatile uint16_t*) 0x400004C))

#define GBA_LCD_MOSAICBG (*((volatile uint8_t*) 0x400004C))

#define GBA_LCD_MOSAICOBJ (*((volatile uint8_t*) 0x400004D))

#define GBA_LCD_BLENDCNT (*((volatile uint16_t*) 0x4000050))

#define GBA_LCD_BLENDALPHA (*((volatile uint16_t*) 0x4000052))

#define GBA_LCD_BLENDMUL (*((volatile uint16_t*) 0x4000054))

/**@}*/

/**
 * @addtogroup hardware_sio Hardware defines - Serial MMIO
 * @{
 */

#define GBA_SIO_PORTCNT (*((volatile uint16_t*) 0x4000134))
#define GBA_SIO_PORTCNT_SC_DATA 0x01
#define GBA_SIO_PORTCNT_SD_DATA 0x02
#define GBA_SIO_PORTCNT_SI_DATA 0x04
#define GBA_SIO_PORTCNT_SO_DATA 0x08
#define GBA_SIO_PORTCNT_SC_DIR_IN 0x00
#define GBA_SIO_PORTCNT_SC_DIR_OUT 0x10
#define GBA_SIO_PORTCNT_SC_DIR_SHIFT 4
#define GBA_SIO_PORTCNT_SC_DIR_MASK 0x10
#define GBA_SIO_PORTCNT_SD_DIR_IN 0x00
#define GBA_SIO_PORTCNT_SD_DIR_OUT 0x20
#define GBA_SIO_PORTCNT_SD_DIR_SHIFT 5
#define GBA_SIO_PORTCNT_SD_DIR_MASK 0x20
#define GBA_SIO_PORTCNT_SI_DIR_IN 0x00
#define GBA_SIO_PORTCNT_SI_DIR_OUT 0x40
#define GBA_SIO_PORTCNT_SI_DIR_SHIFT 6
#define GBA_SIO_PORTCNT_SI_DIR_MASK 0x40
#define GBA_SIO_PORTCNT_SO_DIR_IN 0x00
#define GBA_SIO_PORTCNT_SO_DIR_OUT 0x80
#define GBA_SIO_PORTCNT_SO_DIR_SHIFT 7
#define GBA_SIO_PORTCNT_SO_DIR_MASK 0x80
/**
 * Request interrupt on SI falling edge
 */
#define GBA_SIO_PORTCNT_SI_IRQ 0x100
/**
 * Serial I/O; SIO_CNT controls port
 */
#define GBA_SIO_PORTCNT_MODE_SIO 0x00
/**
 * Raw I/O; SIO_PORTCNT controls port directly
 */
#define GBA_SIO_PORTCNT_MODE_RAW 0x8000
/**
 * Joybus I/O; SIO_JOYCNT controls port
 */
#define GBA_SIO_PORTCNT_MODE_JOYBUS 0xC000
#define GBA_SIO_PORTCNT_MODE_SHIFT 14
#define GBA_SIO_PORTCNT_MODE_MASK 0xC000

#define GBA_SIO_CNT (*((volatile uint16_t*) 0x4000134))
/**
 * Use external clock
 */
#define GBA_SIO_CNT_SPI_CLOCK_EXT 0x00
/**
 * Use 256 KHz internal clock
 */
#define GBA_SIO_CNT_SPI_CLOCK_INT_256KHZ 0x00
/**
 * Use 2 MHz internal clock
 */
#define GBA_SIO_CNT_SPI_CLOCK_INT_2MHZ 0x00
#define GBA_SIO_CNT_SPI_CLOCK_SHIFT 0
#define GBA_SIO_CNT_SPI_CLOCK_MASK 0x03
/**
 * 9600 baud/sec
 */
#define GBA_SIO_CNT_MULTI_BAUD_9600 0x00
/**
 * 38400 baud/sec
 */
#define GBA_SIO_CNT_MULTI_BAUD_38400 0x01
/**
 * 57600 baud/sec
 */
#define GBA_SIO_CNT_MULTI_BAUD_57600 0x02
/**
 * 115200 baud/sec
 */
#define GBA_SIO_CNT_MULTI_BAUD_115200 0x03
#define GBA_SIO_CNT_MULTI_BAUD_SHIFT 0
#define GBA_SIO_CNT_MULTI_BAUD_MASK 0x03
#define GBA_SIO_CNT_MULTI_ERROR 0x40
/**
 * 9600 baud/sec
 */
#define GBA_SIO_CNT_UART_BAUD_9600 0x00
/**
 * 38400 baud/sec
 */
#define GBA_SIO_CNT_UART_BAUD_38400 0x01
/**
 * 57600 baud/sec
 */
#define GBA_SIO_CNT_UART_BAUD_57600 0x02
/**
 * 115200 baud/sec
 */
#define GBA_SIO_CNT_UART_BAUD_115200 0x03
#define GBA_SIO_CNT_UART_BAUD_SHIFT 0
#define GBA_SIO_CNT_UART_BAUD_MASK 0x03
#define GBA_SIO_CNT_UART_ERROR 0x40
#define GBA_SIO_CNT_UART_DATA_LENGTH_7BIT 0x00
#define GBA_SIO_CNT_UART_DATA_LENGTH_8BIT 0x80
#define GBA_SIO_CNT_UART_DATA_LENGTH_SHIFT 7
#define GBA_SIO_CNT_UART_DATA_LENGTH_MASK 0x80
#define GBA_SIO_CNT_UART_FIFO_ENABLE 0x100
#define GBA_SIO_CNT_UART_PARITY_ENABLE 0x200
#define GBA_SIO_CNT_UART_SEND_ENABLE 0x400
#define GBA_SIO_CNT_UART_RECV_ENABLE 0x800
/**
 * 8-bit SPI
 */
#define GBA_SIO_CNT_MODE_SPI8 0x00
/**
 * 32-bit SPI
 */
#define GBA_SIO_CNT_MODE_SPI32 0x1000
/**
 * 16-bit Multiplay
 */
#define GBA_SIO_CNT_MODE_MULTI 0x2000
/**
 * UART
 */
#define GBA_SIO_CNT_MODE_UART 0x3000
#define GBA_SIO_CNT_MODE_SHIFT 12
#define GBA_SIO_CNT_MODE_MASK 0x3000
/**
 * Request interrupt on transfer completion
 */
#define GBA_SIO_CNT_IRQ 0x4000

#define GBA_SIO_DATA32 (*((volatile uint32_t*) 0x4000120))

#define GBA_SIO_DATA8 (*((volatile uint8_t*) 0x400012A))

#define GBA_SIO_MULTISEND (*((volatile uint16_t*) 0x400012A))

#define GBA_SIO_MULTIRECV0 (*((volatile uint16_t*) 0x4000120))

#define GBA_SIO_MULTIRECV1 (*((volatile uint16_t*) 0x4000122))

#define GBA_SIO_MULTIRECV2 (*((volatile uint16_t*) 0x4000124))

#define GBA_SIO_MULTIRECV3 (*((volatile uint16_t*) 0x4000126))

#define GBA_SIO_JOYCNT (*((volatile uint16_t*) 0x4000140))
/**
 * Request interrupt on device reset
 */
#define GBA_SIO_JOYCNT_IRQ 0x40

#define GBA_SIO_JOYRECV (*((volatile uint32_t*) 0x4000150))

#define GBA_SIO_JOYSEND (*((volatile uint32_t*) 0x4000154))

#define GBA_SIO_JOYSTAT (*((volatile uint16_t*) 0x4000158))

/**@}*/

/**
 * @addtogroup hardware_system Hardware defines - System MMIO
 * @{
 */

/**
 * Memory waitstate control
 */
#define GBA_SOC_WAITCNT (*((volatile uint16_t*) 0x4000204))
/**
 * 4 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_SRAM_4 0x00
/**
 * 3 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_SRAM_3 0x01
/**
 * 2 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_SRAM_2 0x02
/**
 * 8 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_SRAM_8 0x03
#define GBA_SOC_WAITCNT_SRAM_SHIFT 0
#define GBA_SOC_WAITCNT_SRAM_MASK 0x03
/**
 * 4 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM0_4 0x00
/**
 * 3 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM0_3 0x04
/**
 * 2 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM0_2 0x08
/**
 * 8 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM0_8 0x0C
#define GBA_SOC_WAITCNT_ROM0_SHIFT 2
#define GBA_SOC_WAITCNT_ROM0_MASK 0x0C
/**
 * 2 additional system clocks per sequential access
 */
#define GBA_SOC_WAITCNT_ROM0S_2 0x00
/**
 * 1 additional system clock per sequential access
 */
#define GBA_SOC_WAITCNT_ROM0S_1 0x10
#define GBA_SOC_WAITCNT_ROM0S_SHIFT 4
#define GBA_SOC_WAITCNT_ROM0S_MASK 0x10
/**
 * 4 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM1_4 0x00
/**
 * 3 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM1_3 0x20
/**
 * 2 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM1_2 0x40
/**
 * 8 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM1_8 0x60
#define GBA_SOC_WAITCNT_ROM1_SHIFT 5
#define GBA_SOC_WAITCNT_ROM1_MASK 0x60
/**
 * 2 additional system clocks per sequential access
 */
#define GBA_SOC_WAITCNT_ROM1S_2 0x00
/**
 * 1 additional system clock per sequential access
 */
#define GBA_SOC_WAITCNT_ROM1S_1 0x80
#define GBA_SOC_WAITCNT_ROM1S_SHIFT 7
#define GBA_SOC_WAITCNT_ROM1S_MASK 0x80
/**
 * 4 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM2_4 0x00
/**
 * 3 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM2_3 0x100
/**
 * 2 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM2_2 0x200
/**
 * 8 additional system clocks per access
 */
#define GBA_SOC_WAITCNT_ROM2_8 0x300
#define GBA_SOC_WAITCNT_ROM2_SHIFT 8
#define GBA_SOC_WAITCNT_ROM2_MASK 0x300
/**
 * 2 additional system clocks per sequential access
 */
#define GBA_SOC_WAITCNT_ROM2S_2 0x00
/**
 * 1 additional system clock per sequential access
 */
#define GBA_SOC_WAITCNT_ROM2S_1 0x400
#define GBA_SOC_WAITCNT_ROM2S_SHIFT 10
#define GBA_SOC_WAITCNT_ROM2S_MASK 0x400
/**
 * No clock output
 */
#define GBA_SOC_WAITCNT_PHI_NONE 0x00
/**
 * System div 4 (~4.19 MHz) clock output
 */
#define GBA_SOC_WAITCNT_PHI_DIV_4 0x800
/**
 * System div 2 (~8.38 MHz) clock output
 */
#define GBA_SOC_WAITCNT_PHI_DIV_2 0x1000
/**
 * System div 1 (~16.78 MHz) clock output
 */
#define GBA_SOC_WAITCNT_PHI_DIV_1 0x1800
#define GBA_SOC_WAITCNT_PHI_SHIFT 11
#define GBA_SOC_WAITCNT_PHI_MASK 0x1800
/**
 * Enable ROM prefetch
 */
#define GBA_SOC_WAITCNT_ROM_PREFETCH 0x4000
/**
 * GBA cartridge
 */
#define GBA_SOC_WAITCNT_CART_TYPE_AGB 0x00
/**
 * GB/GBC cartridge
 */
#define GBA_SOC_WAITCNT_CART_TYPE_CGB 0x8000
#define GBA_SOC_WAITCNT_CART_TYPE_SHIFT 15
#define GBA_SOC_WAITCNT_CART_TYPE_MASK 0x8000

/**
 * Set to 0 on cold reset, 1 on warm reset
 */
#define GBA_SOC_WARMFLG (*((volatile uint8_t*) 0x4000300))

#define GBA_SOC_HALTCNT (*((volatile uint8_t*) 0x4000301))
#define GBA_SOC_HALTCNT_MODE_HALT 0x00
#define GBA_SOC_HALTCNT_MODE_STOP 0x80
#define GBA_SOC_HALTCNT_MODE_SHIFT 7
#define GBA_SOC_HALTCNT_MODE_MASK 0x80

#define GBA_SOC_MEMCNT (*((volatile uint32_t*) 0x4000800))
#define GBA_SOC_MEMCNT_WRAM_DISABLE 0x01
#define GBA_SOC_MEMCNT_CGB_TEST0 0x02
#define GBA_SOC_MEMCNT_CGB_TEST1 0x04
#define GBA_SOC_MEMCNT_CGB_TEST2 0x08
#define GBA_SOC_MEMCNT_EWRAM_ENABLE 0x20
#define GBA_SOC_MEMCNT_RAM_WAIT_15 0x00
#define GBA_SOC_MEMCNT_RAM_WAIT_14 0x1000000
#define GBA_SOC_MEMCNT_RAM_WAIT_13 0x2000000
#define GBA_SOC_MEMCNT_RAM_WAIT_12 0x3000000
#define GBA_SOC_MEMCNT_RAM_WAIT_11 0x4000000
#define GBA_SOC_MEMCNT_RAM_WAIT_10 0x5000000
#define GBA_SOC_MEMCNT_RAM_WAIT_9 0x6000000
#define GBA_SOC_MEMCNT_RAM_WAIT_8 0x7000000
#define GBA_SOC_MEMCNT_RAM_WAIT_7 0x8000000
#define GBA_SOC_MEMCNT_RAM_WAIT_6 0x9000000
#define GBA_SOC_MEMCNT_RAM_WAIT_5 0xA000000
#define GBA_SOC_MEMCNT_RAM_WAIT_4 0xB000000
#define GBA_SOC_MEMCNT_RAM_WAIT_3 0xC000000
#define GBA_SOC_MEMCNT_RAM_WAIT_2 0xD000000
#define GBA_SOC_MEMCNT_RAM_WAIT_1 0xE000000
#define GBA_SOC_MEMCNT_RAM_WAIT_SHIFT 24
#define GBA_SOC_MEMCNT_RAM_WAIT_MASK 0xF000000

/**@}*/

/**
 * @addtogroup hardware_timer Hardware defines - Timer MMIO
 * @{
 */

#define GBA_TIMER_VAL(x) (*((volatile uint16_t*) ((0x4000100) + (4 * (x))))

#define GBA_TIMER_CNT(x) (*((volatile uint16_t*) ((0x4000102) + (4 * (x))))
/**
 * System div 1 (~16.78 MHz) clock
 */
#define GBA_TIMER_CNT_DIV_1 0x00
/**
 * System div 64 (~262 KHz) clock
 */
#define GBA_TIMER_CNT_DIV_64 0x01
/**
 * System div 256 (~65 KHz) clock
 */
#define GBA_TIMER_CNT_DIV_256 0x02
/**
 * System div 1024 (~16 KHz) clock
 */
#define GBA_TIMER_CNT_DIV_1024 0x03
/**
 * Previous timer clock
 */
#define GBA_TIMER_CNT_DIV_PREV 0x04
#define GBA_TIMER_CNT_DIV_SHIFT 0
#define GBA_TIMER_CNT_DIV_MASK 0x07
/**
 * Request interrupt on timer overflow
 */
#define GBA_TIMER_CNT_IRQ 0x40
#define GBA_TIMER_CNT_ENABLE 0x80

#define GBA_TIMER0VAL (*((volatile uint16_t*) 0x4000100))

#define GBA_TIMER0CNT (*((volatile uint16_t*) 0x4000102))

#define GBA_TIMER1VAL (*((volatile uint16_t*) 0x4000104))

#define GBA_TIMER1CNT (*((volatile uint16_t*) 0x4000106))

#define GBA_TIMER2VAL (*((volatile uint16_t*) 0x4000108))

#define GBA_TIMER2CNT (*((volatile uint16_t*) 0x400010A))

#define GBA_TIMER3VAL (*((volatile uint16_t*) 0x400010C))

#define GBA_TIMER3CNT (*((volatile uint16_t*) 0x400010E))

/**@}*/

#endif /* GBA_MMIO_H_ */


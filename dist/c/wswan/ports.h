// SPDX-License-Identifier: CC0-1.0
//
// Auto-generated by hardware-definitions/generate.py on 2025-06-19 07:31
#ifndef __ASSEMBLER__
#include <stdint.h>
#endif

#ifndef WS_PORTS_H_
#define WS_PORTS_H_

/**
 * @addtogroup hardware_cart_bank Hardware defines - Cartridge banking I/O ports
 * @{
 */

/**
 * Linear ROM (0x40000 - 0xFFFFF) bank address.
 */
#define WS_CART_BANK_ROML_PORT 0xC0

/**
 * RAM (0x10000 - 0x1FFFF) bank address (up to 16 MiB).
 */
#define WS_CART_BANK_RAM_PORT 0xC1

/**
 * ROM0 (0x20000 - 0x2FFFF) bank address (up to 16 MiB).
 */
#define WS_CART_BANK_ROM0_PORT 0xC2

/**
 * ROM1 (0x30000 - 0x3FFFF) bank address (up to 16 MiB).
 */
#define WS_CART_BANK_ROM1_PORT 0xC3

/**
 * Control ROM/Flash access in RAM bank area.
 */
#define WS_CART_BANK_FLASH_PORT 0xCE
#define WS_CART_BANK_FLASH_ENABLE 0x01
#define WS_CART_BANK_FLASH_DISABLE 0x00

/**
 * Linear ROM (0x40000 - 0xFFFFF) bank address.
 */
#define WS_CART_EXTBANK_ROML_PORT 0xCF

/**
 * RAM (0x10000 - 0x1FFFF) bank address (up to 4 GiB).
 */
#define WS_CART_EXTBANK_RAM_PORT 0xD0

/**
 * ROM0 (0x20000 - 0x2FFFF) bank address (up to 4 GiB).
 */
#define WS_CART_EXTBANK_ROM0_PORT 0xD2

/**
 * ROM1 (0x30000 - 0x3FFFF) bank address (up to 4 GiB).
 */
#define WS_CART_EXTBANK_ROM1_PORT 0xD4

/**@}*/

/**
 * @addtogroup hardware_cart_eeprom Hardware defines - Cartridge EEPROM I/O ports
 * @{
 */

/**
 * Cartridge EEPROM data.
 */
#define WS_CART_EEP_DATA_PORT 0xC4

/**
 * Cartridge EEPROM command.
 */
#define WS_CART_EEP_COMMAND_PORT 0xC6

#define WS_CART_EEP_CTRL_PORT 0xC8
/**
 * Abort cartridge EEPROM transfer.
 */
#define WS_CART_EEP_CTRL_ABORT 0x80
/**
 * Send erase command to cartridge EEPROM.
 */
#define WS_CART_EEP_CTRL_ERASE 0x40
/**
 * Send write command to cartridge EEPROM.
 */
#define WS_CART_EEP_CTRL_WRITE 0x20
/**
 * Send read command to cartridge EEPROM.
 */
#define WS_CART_EEP_CTRL_READ 0x10
/**
 * A new cartridge EEPROM command can be written to the I/O ports.
 */
#define WS_CART_EEP_CTRL_READY 0x02
#define WS_CART_EEP_CTRL_DONE 0x01

/**@}*/

/**
 * @addtogroup hardware_cart_gpio Hardware defines - Cartridge GPIO I/O ports
 * @{
 */

#define WS_CART_GPIO_DIR_PORT 0xCC

#define WS_CART_GPIO_DATA_PORT 0xCD

/**@}*/

/**
 * @addtogroup hardware_cart_karnak Hardware defines - Karnak mapper I/O ports
 * @{
 */

#define WS_CART_KARNAK_TIMER_IRQ_PORT 0xD6
#define WS_CART_KARNAK_TIMER_IRQ_ENABLE 0x80

#define WS_CART_KARNAK_ADPCM_IN_PORT 0xD8

#define WS_CART_KARNAK_ADPCM_OUT_PORT 0xD9

/**@}*/

/**
 * @addtogroup hardware_cart_rtc Hardware defines - Cartridge RTC I/O ports
 * @{
 */

#define WS_CART_RTC_CTRL_PORT 0xCA
#define WS_CART_RTC_CTRL_READ_BIT 0x01
#define WS_CART_RTC_CTRL_READY 0x80
#define WS_CART_RTC_CTRL_ACTIVE 0x10
#define WS_CART_RTC_CTRL_CMD_RESET 0x00
#define WS_CART_RTC_CTRL_CMD_WRITE_STATUS 0x02
#define WS_CART_RTC_CTRL_CMD_READ_STATUS 0x03
#define WS_CART_RTC_CTRL_CMD_WRITE_DATETIME 0x04
#define WS_CART_RTC_CTRL_CMD_READ_DATETIME 0x05
#define WS_CART_RTC_CTRL_CMD_WRITE_TIME 0x06
#define WS_CART_RTC_CTRL_CMD_READ_TIME 0x07
#define WS_CART_RTC_CTRL_CMD_WRITE_ALARM 0x08
#define WS_CART_RTC_CTRL_CMD_SHIFT 0
#define WS_CART_RTC_CTRL_CMD_MASK 0x1F

#define WS_CART_RTC_DATA_PORT 0xCB

/**@}*/

/**
 * @addtogroup hardware_display Hardware defines - Display hardware I/O ports
 * @{
 */

#define WS_DISPLAY_CTRL_PORT 0x00
/**
 * Enable the Screen 1 layer.
 */
#define WS_DISPLAY_CTRL_SCR1_ENABLE 0x01
/**
 * Enable the Screen 2 layer.
 */
#define WS_DISPLAY_CTRL_SCR2_ENABLE 0x02
/**
 * Enable the sprite layer.
 */
#define WS_DISPLAY_CTRL_SPR_ENABLE 0x04
/**
 * Enable the sprite window.
 */
#define WS_DISPLAY_CTRL_SPR_WIN_ENABLE 0x08
/**
 * Limit drawing the Screen 2 window to inside its bounds.
 */
#define WS_DISPLAY_CTRL_SCR2_WIN_INSIDE 0x20
/**
 * Limit drawing the Screen 2 window to outside its bounds.
 */
#define WS_DISPLAY_CTRL_SCR2_WIN_OUTSIDE 0x30
#define WS_DISPLAY_CTRL_SCR2_WIN_SHIFT 4
#define WS_DISPLAY_CTRL_SCR2_WIN_MASK 0x30
#define WS_DISPLAY_CTRL_SCR2_WIN_ENABLE_BIT 0x20
#define WS_DISPLAY_CTRL_SCR2_WIN_OUTSIDE_BIT 0x10

/**
 * The display's background shade/color.
 */
#define WS_DISPLAY_BACK_PORT 0x01

/**
 * The current line being drawn by the display.
 * 
 * Note that final color translation is applied with a one-line delay; for changing LCD shade or color palette values, subtract 1 from this value.
 */
#define WS_DISPLAY_LINE_PORT 0x02

/**
 * The line on the start of which the line interurpt should be requested.
 */
#define WS_DISPLAY_LINE_IRQ_PORT 0x03

/**
 * Base address of sprite table data.
 */
#define WS_SPR_BASE_PORT 0x04
#define WS_SPR_BASE_ADDR(n) (((unsigned int) (n)) >> 9)

/**
 * First sprite to draw from the sprite table (0 - 127).
 */
#define WS_SPR_FIRST_PORT 0x05

/**
 * Number of consecutive sprites to draw from the sprite table (1 - 128).
 */
#define WS_SPR_COUNT_PORT 0x06

/**
 * Base address of screen layer data.
 */
#define WS_SCR_BASE_PORT 0x07
#define WS_SCR_BASE_ADDR1(n) (((unsigned int) (n)) >> 11)
#define WS_SCR_BASE_ADDR2(n) ((((unsigned int) (n)) >> 11) << 4)

/**
 * Left-most pixel of the Screen 2 window.
 */
#define WS_SCR2_WIN_X1_PORT 0x08

/**
 * Top-most pixel of the Screen 2 window.
 */
#define WS_SCR2_WIN_Y1_PORT 0x09

/**
 * Right-most pixel of the Screen 2 window.
 */
#define WS_SCR2_WIN_X2_PORT 0x0A

/**
 * Bottom-most pixel of the Screen 2 window.
 */
#define WS_SCR2_WIN_Y2_PORT 0x0B

/**
 * Left-most pixel of the sprite window.
 */
#define WS_SPR_WIN_X1_PORT 0x0C

/**
 * Top-most pixel of the sprite window.
 */
#define WS_SPR_WIN_Y1_PORT 0x0D

/**
 * Right-most pixel of the sprite window.
 */
#define WS_SPR_WIN_X2_PORT 0x0E

/**
 * Bottom-most pixel of the sprite window.
 */
#define WS_SPR_WIN_Y2_PORT 0x0F

/**
 * X drawing offset of the Screen 1 layer.
 */
#define WS_SCR1_SCRL_X_PORT 0x10

/**
 * Y drawing offset of the Screen 1 layer.
 */
#define WS_SCR1_SCRL_Y_PORT 0x11

/**
 * X drawing offset of the Screen 2 layer.
 */
#define WS_SCR2_SCRL_X_PORT 0x12

/**
 * Y drawing offset of the Screen 2 layer.
 */
#define WS_SCR2_SCRL_Y_PORT 0x13

/**
 * Controls LCD driver functionality.
 */
#define WS_LCD_CTRL_PORT 0x14
/**
 * Low contrast (drive one line of the LCD at a time with pixel data).
 */
#define WS_LCD_CTRL_CONTRAST_LOW 0x00
/**
 * High contrast (drive two lines of the LCD at a time with pixel data).
 */
#define WS_LCD_CTRL_CONTRAST_HIGH 0x02
/**
 * Control WSC high contrast mode.
 * 
 * This mode works by having the LCD drive two lines at a time with data received from the SoC. The first line of the LCD is driven by the first line from the SoC, then additionally by the second line from the SoC.
 */
#define WS_LCD_CTRL_CONTRAST_SHIFT 1
#define WS_LCD_CTRL_CONTRAST_MASK 0x02
/**
 * Disable graphics display.
 */
#define WS_LCD_CTRL_DISPLAY_DISABLE 0x00
/**
 * Enable graphics display.
 */
#define WS_LCD_CTRL_DISPLAY_ENABLE 0x01
/**
 * Control whether or not the LCD is displaying graphics. Does not affect the segment area.
 */
#define WS_LCD_CTRL_DISPLAY_SHIFT 0
#define WS_LCD_CTRL_DISPLAY_MASK 0x01

/**
 * Controls the visibility of LCD sidebar icons.
 */
#define WS_LCD_ICON_PORT 0x15
/**
 * Sleep segment icon, depicted as a star.
 */
#define WS_LCD_ICON_SLEEP 0x01
/**
 * Vertical orientation icon.
 */
#define WS_LCD_ICON_ORIENT_V 0x02
/**
 * Horizontal orientation icon.
 */
#define WS_LCD_ICON_ORIENT_H 0x04
/**
 * Etc. 1 (small circle) icon.
 */
#define WS_LCD_ICON_AUX1 0x08
/**
 * Etc. 2 (medium circle) icon.
 */
#define WS_LCD_ICON_AUX2 0x10
/**
 * Etc. 3 (large circle) icon.
 */
#define WS_LCD_ICON_AUX3 0x20

/**
 * The final line preceding line counter restart and the beginning of active display. By default, this is set to 158, which equals 159 total lines per frame.
 * 
 * For safety reasons, this should only be set to even values.
 */
#define WS_LCD_VTOTAL_PORT 0x16

/**
 * On STN models (WS/WSC), this controls the start of the vertical back porch. For compatibility, this should always be set to 3 less than LCD_VTOTAL.
 */
#define WS_LCD_STN_VSYNC_PORT 0x17

/**
 * The next line to start drawing on. Write-only. Not recommended for use.
 */
#define WS_LCD_NEXT_LINE_PORT 0x18

/**
 * Latched (SoC-controlled) icon status/control.
 */
#define WS_LCD_ICON_LATCH_PORT 0x1A
#define WS_LCD_ICON_LATCH_DISABLE 0x01
#define WS_LCD_ICON_LATCH_HEADPHONE 0x02
#define WS_LCD_ICON_LATCH_VOLUME_B 0x04
#define WS_LCD_ICON_LATCH_VOLUME_A 0x08
#define WS_LCD_ICON_LATCH_VOLUME 0x10
#define WS_LCD_ICON_LATCH_CARTRIDGE 0x20

#define WS_LCD_SHADE_01_PORT 0x1C

#define WS_LCD_SHADE_23_PORT 0x1D

#define WS_LCD_SHADE_45_PORT 0x1E

#define WS_LCD_SHADE_67_PORT 0x1F

#define WS_SCR_PAL_0_PORT 0x20
#define WS_SCR_PAL_1_PORT 0x22
#define WS_SCR_PAL_2_PORT 0x24
#define WS_SCR_PAL_3_PORT 0x26
#define WS_SCR_PAL_4_PORT 0x28
#define WS_SCR_PAL_5_PORT 0x2A
#define WS_SCR_PAL_6_PORT 0x2C
#define WS_SCR_PAL_7_PORT 0x2E
#define WS_SCR_PAL_8_PORT 0x30
#define WS_SCR_PAL_9_PORT 0x32
#define WS_SCR_PAL_10_PORT 0x34
#define WS_SCR_PAL_11_PORT 0x36
#define WS_SCR_PAL_12_PORT 0x38
#define WS_SCR_PAL_13_PORT 0x3A
#define WS_SCR_PAL_14_PORT 0x3C
#define WS_SCR_PAL_15_PORT 0x3E
#define WS_SCR_PAL_PORT(i) (0x20 + (2 * ((i) - 0)))

#define WS_SPR_PAL_0_PORT 0x30
#define WS_SPR_PAL_1_PORT 0x32
#define WS_SPR_PAL_2_PORT 0x34
#define WS_SPR_PAL_3_PORT 0x36
#define WS_SPR_PAL_4_PORT 0x38
#define WS_SPR_PAL_5_PORT 0x3A
#define WS_SPR_PAL_6_PORT 0x3C
#define WS_SPR_PAL_7_PORT 0x3E
#define WS_SPR_PAL_PORT(i) (0x30 + (2 * ((i) - 0)))

/**@}*/

/**
 * @addtogroup hardware_dma Hardware defines - DMA I/O ports (color-exclusive)
 * @{
 */

/**
 * Low 16 bits of the linear GDMA source address.
 */
#define WS_GDMA_SOURCE_L_PORT 0x40

/**
 * High 4 bits of the linear GDMA source address.
 */
#define WS_GDMA_SOURCE_H_PORT 0x42

/**
 * Linear GDMA destination address in IRAM.
 */
#define WS_GDMA_DEST_PORT 0x44

/**
 * GDMA length, in bytes; must be a multiple of two.
 */
#define WS_GDMA_LENGTH_PORT 0x46

/**
 * Control GDMA functionality.
 */
#define WS_GDMA_CTRL_PORT 0x48
/**
 * Start GDMA transfer. This blocks the CPU until the transfer is complete.
 */
#define WS_GDMA_CTRL_START 0x80
#define WS_GDMA_CTRL_INC 0x00
#define WS_GDMA_CTRL_DEC 0x40

/**
 * Low 16 bits of the linear sound DMA source address.
 */
#define WS_SDMA_SOURCE_L_PORT 0x4A

/**
 * High 4 bits of the linear sound DMA source address.
 */
#define WS_SDMA_SOURCE_H_PORT 0x4C

/**
 * Low 16 bits of the sound DMA transfer length.
 */
#define WS_SDMA_LENGTH_L_PORT 0x4E

/**
 * High 4 bits of the sound DMA transfer length.
 */
#define WS_SDMA_LENGTH_H_PORT 0x50

#define WS_SDMA_CTRL_PORT 0x52
/**
 * Enable sound DMA transfers. This blocks the CPU for a few cycles per sample fetched.
 */
#define WS_SDMA_CTRL_ENABLE 0x80
#define WS_SDMA_CTRL_INC 0x00
#define WS_SDMA_CTRL_DEC 0x40
/**
 * Transfer samples to channel 2.
 */
#define WS_SDMA_CTRL_TARGET_CH2 0x00
/**
 * Transfer samples to Hyper Voice.
 */
#define WS_SDMA_CTRL_TARGET_HYPERV 0x10
#define WS_SDMA_CTRL_TARGET_SHIFT 4
#define WS_SDMA_CTRL_TARGET_MASK 0x10
/**
 * Stop transferring sample data when the transfer is complete.
 */
#define WS_SDMA_CTRL_ONESHOT 0x00
/**
 * Restart transferring sample data from the beginning when the transfer is complete.
 */
#define WS_SDMA_CTRL_REPEAT 0x08
#define WS_SDMA_CTRL_HOLD 0x04
/**
 * Sound DMA sample rate: 4000 Hz.
 */
#define WS_SDMA_CTRL_RATE_4000 0x00
/**
 * Sound DMA sample rate: 6000 Hz.
 */
#define WS_SDMA_CTRL_RATE_6000 0x01
/**
 * Sound DMA sample rate: 12000 Hz.
 */
#define WS_SDMA_CTRL_RATE_12000 0x02
/**
 * Sound DMA sample rate: 24000 Hz.
 */
#define WS_SDMA_CTRL_RATE_24000 0x03
#define WS_SDMA_CTRL_RATE_SHIFT 0
#define WS_SDMA_CTRL_RATE_MASK 0x03

/**@}*/

/**
 * @addtogroup hardware_eeprom Hardware defines - Internal EEPROM I/O ports
 * @{
 */

/**
 * Internal EEPROM data.
 */
#define WS_IEEP_DATA_PORT 0xBA

/**
 * Internal EEPROM command.
 */
#define WS_IEEP_COMMAND_PORT 0xBC

#define WS_IEEP_CTRL_PORT 0xBE
/**
 * Protect the internal EEPROM's non-user area (bytes 0x60 onward) from being written to.
 */
#define WS_IEEP_CTRL_PROTECT 0x80
/**
 * Send erase command to internal EEPROM.
 */
#define WS_IEEP_CTRL_ERASE 0x40
/**
 * Send write command to internal EEPROM.
 */
#define WS_IEEP_CTRL_WRITE 0x20
/**
 * Send read command to internal EEPROM.
 */
#define WS_IEEP_CTRL_READ 0x10
/**
 * A new internal EEPROM command can be written to the I/O ports.
 */
#define WS_IEEP_CTRL_READY 0x02
/**
 * Finished reading out a word from the internal EEPROM.
 */
#define WS_IEEP_CTRL_DONE 0x01

/**@}*/

/**
 * @addtogroup hardware_hyper_voice Hardware defines - Hyper Voice I/O ports (color-exclusive)
 * @{
 */

#define WS_HYPERV_OUT_L_PORT 0x64

#define WS_HYPERV_OUT_R_PORT 0x66

#define WS_HYPERV_CTRL_PORT 0x6A
#define WS_HYPERV_CTRL_VOLUME_100 0x00
#define WS_HYPERV_CTRL_VOLUME_50 0x01
#define WS_HYPERV_CTRL_VOLUME_25 0x02
#define WS_HYPERV_CTRL_VOLUME_12_5 0x03
#define WS_HYPERV_CTRL_VOLUME_SHIFT 0
#define WS_HYPERV_CTRL_VOLUME_MASK 0x03
#define WS_HYPERV_CTRL_EXT_UNSIGNED 0x00
#define WS_HYPERV_CTRL_EXT_UNSIGNED_NEGATE 0x04
#define WS_HYPERV_CTRL_EXT_SIGNED 0x08
#define WS_HYPERV_CTRL_EXT_IGNORE 0x0C
#define WS_HYPERV_CTRL_EXT_SHIFT 2
#define WS_HYPERV_CTRL_EXT_MASK 0x0C
#define WS_HYPERV_CTRL_RATE_24000 0x00
#define WS_HYPERV_CTRL_RATE_12000 0x10
#define WS_HYPERV_CTRL_RATE_8000 0x20
#define WS_HYPERV_CTRL_RATE_6000 0x30
#define WS_HYPERV_CTRL_RATE_4800 0x40
#define WS_HYPERV_CTRL_RATE_4000 0x50
#define WS_HYPERV_CTRL_RATE_3000 0x60
#define WS_HYPERV_CTRL_RATE_2000 0x70
#define WS_HYPERV_CTRL_RATE_SHIFT 4
#define WS_HYPERV_CTRL_RATE_MASK 0x70
#define WS_HYPERV_CTRL_ENABLE 0x80
#define WS_HYPERV_CTRL_RESET 0x1000
#define WS_HYPERV_CTRL_TARGET_STEREO 0x00
#define WS_HYPERV_CTRL_TARGET_LEFT 0x2000
#define WS_HYPERV_CTRL_TARGET_RIGHT 0x4000
#define WS_HYPERV_CTRL_TARGET_MONO 0x6000
#define WS_HYPERV_CTRL_TARGET_SHIFT 13
#define WS_HYPERV_CTRL_TARGET_MASK 0x6000

/**@}*/

/**
 * @addtogroup hardware_interrupts Hardware defines - Interrupt control I/O ports
 * @{
 */

/**
 * Currently requested interrupt vector, if any. Bits 3-7 are writable and serve as the vector's offset.
 */
#define WS_INT_VECTOR_PORT 0xB0

#define WS_INT_ENABLE_PORT 0xB2
/**
 * UART TX ready.
 */
#define WS_INT_ENABLE_UART_TX 0x01
/**
 * Key scan column non-zero.
 */
#define WS_INT_ENABLE_KEY_SCAN 0x02
/**
 * Cartridge IRQ pin.
 */
#define WS_INT_ENABLE_CARTRIDGE 0x04
/**
 * UART RX ready.
 */
#define WS_INT_ENABLE_UART_RX 0x08
/**
 * Display line match.
 */
#define WS_INT_ENABLE_LINE_MATCH 0x10
/**
 * Vertical blank timer.
 */
#define WS_INT_ENABLE_VBL_TIMER 0x20
/**
 * Vertical blank.
 */
#define WS_INT_ENABLE_VBLANK 0x40
/**
 * Horizontal blank timer.
 */
#define WS_INT_ENABLE_HBL_TIMER 0x80

#define WS_INT_STATUS_PORT 0xB4
/**
 * UART TX ready.
 */
#define WS_INT_STATUS_UART_TX 0x01
/**
 * Key scan column non-zero.
 */
#define WS_INT_STATUS_KEY_SCAN 0x02
/**
 * Cartridge IRQ pin.
 */
#define WS_INT_STATUS_CARTRIDGE 0x04
/**
 * UART RX ready.
 */
#define WS_INT_STATUS_UART_RX 0x08
/**
 * Display line match.
 */
#define WS_INT_STATUS_LINE_MATCH 0x10
/**
 * Vertical blank timer.
 */
#define WS_INT_STATUS_VBL_TIMER 0x20
/**
 * Vertical blank.
 */
#define WS_INT_STATUS_VBLANK 0x40
/**
 * Horizontal blank timer.
 */
#define WS_INT_STATUS_HBL_TIMER 0x80

#define WS_INT_ACK_PORT 0xB6
/**
 * UART TX ready.
 */
#define WS_INT_ACK_UART_TX 0x01
/**
 * Key scan column non-zero.
 */
#define WS_INT_ACK_KEY_SCAN 0x02
/**
 * Cartridge IRQ pin.
 */
#define WS_INT_ACK_CARTRIDGE 0x04
/**
 * UART RX ready.
 */
#define WS_INT_ACK_UART_RX 0x08
/**
 * Display line match.
 */
#define WS_INT_ACK_LINE_MATCH 0x10
/**
 * Vertical blank timer.
 */
#define WS_INT_ACK_VBL_TIMER 0x20
/**
 * Vertical blank.
 */
#define WS_INT_ACK_VBLANK 0x40
/**
 * Horizontal blank timer.
 */
#define WS_INT_ACK_HBL_TIMER 0x80

/**
 * Controls NMI (non-maskable interrupt) functionality.
 */
#define WS_INT_NMI_CTRL_PORT 0xB7
/**
 * Trigger a non-maskable interrupt when the battery status is low.
 */
#define WS_INT_NMI_CTRL_LOW_BATTERY 0x10

/**@}*/

/**
 * @addtogroup hardware_keypad Hardware defines - Keypad I/O ports
 * @{
 */

/**
 * Controls keypad scanning.
 */
#define WS_KEY_SCAN_PORT 0xB5
#define WS_KEY_SCAN_ROW_BUTTONS 0x40
#define WS_KEY_SCAN_ROW_X 0x20
#define WS_KEY_SCAN_ROW_Y 0x10
#define WS_KEY_SCAN_B 0x08
#define WS_KEY_SCAN_X4 0x08
#define WS_KEY_SCAN_Y4 0x08
#define WS_KEY_SCAN_A 0x04
#define WS_KEY_SCAN_X3 0x04
#define WS_KEY_SCAN_Y3 0x04
#define WS_KEY_SCAN_START 0x02
#define WS_KEY_SCAN_X2 0x02
#define WS_KEY_SCAN_Y2 0x02
#define WS_KEY_SCAN_X1 0x01
#define WS_KEY_SCAN_Y1 0x01

/**@}*/

/**
 * @addtogroup hardware_soc Hardware defines - System control I/O ports
 * @{
 */

#define WS_SYSTEM_CTRL_COLOR_PORT 0x60
/**
 * Enable fast (6 MHz) cartridge clock.
 */
#define WS_SYSTEM_CTRL_COLOR_CART_FAST_CLOCK 0x01
/**
 * Add 1 cycle of wait time to cartridge SRAM transfers.
 */
#define WS_SYSTEM_CTRL_COLOR_SRAM_WAIT 0x02
/**
 * Add 1 cycle of wait time to cartridge I/O transfers.
 */
#define WS_SYSTEM_CTRL_COLOR_IO_WAIT 0x08
/**
 * Mono mode (2 bits per pixel, planar).
 */
#define WS_SYSTEM_CTRL_COLOR_MODE_MONO 0x00
/**
 * Color mode (2 bits per pixel, planar).
 */
#define WS_SYSTEM_CTRL_COLOR_MODE_COLOR_2BPP 0x80
/**
 * Color mode (4 bits per pixel, planar).
 */
#define WS_SYSTEM_CTRL_COLOR_MODE_COLOR_4BPP 0xC0
/**
 * Color mode (4 bits per pixel, packed/chunky).
 */
#define WS_SYSTEM_CTRL_COLOR_MODE_COLOR_4BPP_PACKED 0xE0
#define WS_SYSTEM_CTRL_COLOR_MODE_SHIFT 5
#define WS_SYSTEM_CTRL_COLOR_MODE_MASK 0xE0
#define WS_SYSTEM_CTRL_COLOR_FEAT_COLOR 0x80
#define WS_SYSTEM_CTRL_COLOR_FEAT_4BPP 0x40
#define WS_SYSTEM_CTRL_COLOR_FEAT_PACKED 0x20

#define WS_SYSTEM_CTRL_COLOR2_PORT 0x62
/**
 * Console is Crystal model.
 */
#define WS_SYSTEM_CTRL_COLOR2_MODEL_CRYSTAL 0x80
#define WS_SYSTEM_CTRL_COLOR2_REQUEST_POWER_OFF 0x01

#define WS_SYSTEM_CTRL_PORT 0xA0
/**
 * Console self-test passed.
 */
#define WS_SYSTEM_CTRL_SELF_TEST 0x80
/**
 * Add 1 cycle of wait time to cartridge ROM transfers.
 */
#define WS_SYSTEM_CTRL_ROM_WAIT 0x08
/**
 * Use 16-bit bus for cartridge ROM transfers.
 */
#define WS_SYSTEM_CTRL_ROM_16BIT 0x04
/**
 * Console is a color model (WSC/SC).
 */
#define WS_SYSTEM_CTRL_MODEL_COLOR 0x02
/**
 * IPL is locked.
 */
#define WS_SYSTEM_CTRL_IPL_LOCK 0x01

#define WS_SYSTEM_TEST_PORT 0xA3
#define WS_SYSTEM_TEST_UART 0x08
#define WS_SYSTEM_TEST_VBL_TIMER 0x02
#define WS_SYSTEM_TEST_HBL_TIMER 0x01

/**@}*/

/**
 * @addtogroup hardware_sound Hardware defines - Sound I/O ports
 * @{
 */

/**
 * Sound channel 1 frequency, stored as a divisor. Every `2048 - divisor` cycles, the index of the sample to be fetched from the wavetable is incremented.
 * 
 * The resulting frequency is calculated as follows: `sample rate = 3072000 Hz / (2048 - divisor)`.
 * 
 * Note that this refers to the sample rate of each sample in the wavetable, and needs to be scaled accordingly for a given waveform. For example, a 50% duty square wave (16 samples of 0 followed by 16 samples of 15) will have an effective sample rate of `(3072000 / 32) Hz / (2048 - divisor)`, or `96000 Hz / (2048 - divisor)`.
 */
#define WS_SOUND_FREQ_CH1_PORT 0x80

/**
 * Sound channel 2 frequency, stored as a divisor. Ignored in voice mode.
 */
#define WS_SOUND_FREQ_CH2_PORT 0x82

/**
 * Sound channel 3 frequency, stored as a divisor.
 */
#define WS_SOUND_FREQ_CH3_PORT 0x84

/**
 * Sound channel 4 frequency, stored as a divisor.
 */
#define WS_SOUND_FREQ_CH4_PORT 0x86

/**
 * Sound channel 1 volume.
 */
#define WS_SOUND_VOL_CH1_PORT 0x88

/**
 * Sound channel 2 volume.
 */
#define WS_SOUND_VOL_CH2_PORT 0x89

/**
 * Sound channel 2 unsigned PCM sample; used in voice mode.
 */
#define WS_SOUND_VOICE_SAMPLE_PORT 0x89

/**
 * Sound channel 3 volume.
 */
#define WS_SOUND_VOL_CH3_PORT 0x8A

/**
 * Sound channel 4 volume.
 */
#define WS_SOUND_VOL_CH4_PORT 0x8B

#define WS_SOUND_SWEEP_PORT 0x8C

#define WS_SOUND_SWEEP_TIME_PORT 0x8D

#define WS_SOUND_NOISE_CTRL_PORT 0x8E
#define WS_SOUND_NOISE_CTRL_TAP_14 0x00
#define WS_SOUND_NOISE_CTRL_TAP_10 0x01
#define WS_SOUND_NOISE_CTRL_TAP_13 0x02
#define WS_SOUND_NOISE_CTRL_TAP_4 0x03
#define WS_SOUND_NOISE_CTRL_TAP_8 0x04
#define WS_SOUND_NOISE_CTRL_TAP_6 0x05
#define WS_SOUND_NOISE_CTRL_TAP_9 0x06
#define WS_SOUND_NOISE_CTRL_TAP_11 0x07
#define WS_SOUND_NOISE_CTRL_TAP_SHIFT 0
#define WS_SOUND_NOISE_CTRL_TAP_MASK 0x07
#define WS_SOUND_NOISE_CTRL_LENGTH_32767 0x00
#define WS_SOUND_NOISE_CTRL_LENGTH_1953 0x01
#define WS_SOUND_NOISE_CTRL_LENGTH_254 0x02
#define WS_SOUND_NOISE_CTRL_LENGTH_217 0x03
#define WS_SOUND_NOISE_CTRL_LENGTH_73 0x04
#define WS_SOUND_NOISE_CTRL_LENGTH_63 0x05
#define WS_SOUND_NOISE_CTRL_LENGTH_42 0x06
#define WS_SOUND_NOISE_CTRL_LENGTH_28 0x07
#define WS_SOUND_NOISE_CTRL_LENGTH_SHIFT 0
#define WS_SOUND_NOISE_CTRL_LENGTH_MASK 0x07
/**
 * Reset the LFSR noise generator.
 */
#define WS_SOUND_NOISE_CTRL_RESET 0x08
/**
 * Enable the LFSR noise generator.
 */
#define WS_SOUND_NOISE_CTRL_ENABLE 0x10

/**
 * Sound wavetable base address.
 */
#define WS_SOUND_WAVE_BASE_PORT 0x8F
#define WS_SOUND_WAVE_BASE_ADDR(n) (((unsigned int) (n)) >> 6)

/**
 * Controls sound channels.
 */
#define WS_SOUND_CH_CTRL_PORT 0x90
/**
 * Enable sound channel 1.
 */
#define WS_SOUND_CH_CTRL_CH1_ENABLE 0x01
/**
 * Enable sound channel 2.
 */
#define WS_SOUND_CH_CTRL_CH2_ENABLE 0x02
/**
 * Enable sound channel 3.
 */
#define WS_SOUND_CH_CTRL_CH3_ENABLE 0x04
/**
 * Enable sound channel 4.
 */
#define WS_SOUND_CH_CTRL_CH4_ENABLE 0x08
/**
 * Enable sound channel 2 in voice mode. This overrides the channel 2 enable bit.
 */
#define WS_SOUND_CH_CTRL_CH2_VOICE 0x20
/**
 * Enable applying a frequency sweep effect on sound channel 3.
 */
#define WS_SOUND_CH_CTRL_CH3_SWEEP 0x40
/**
 * Provide samples to sound channel 4 from the LFSR noise generator, as opposed to the wavetable.
 */
#define WS_SOUND_CH_CTRL_CH4_NOISE 0x80

/**
 * Controls sound output circuitry.
 */
#define WS_SOUND_OUT_CTRL_PORT 0x91
/**
 * Set if a headphone adapter is connected.
 */
#define WS_SOUND_OUT_CTRL_HEADPHONE_DETECT 0x80
/**
 * Enable output to the headphone output on the EXT port.
 */
#define WS_SOUND_OUT_CTRL_HEADPHONE_ENABLE 0x08
/**
 * Enable output to the internal speaker.
 */
#define WS_SOUND_OUT_CTRL_SPEAKER_ENABLE 0x01
/**
 * Internal speaker volume: 800% (shift right by 0 bits).
 */
#define WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_800 0x00
/**
 * Internal speaker volume: 400% (shift right by 1 bit).
 */
#define WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_400 0x02
/**
 * Internal speaker volume: 200% (shift right by 2 bits).
 */
#define WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_200 0x04
/**
 * Internal speaker volume: 100% (shift right by 3 bits).
 */
#define WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_100 0x06
#define WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_SHIFT 1
#define WS_SOUND_OUT_CTRL_SPEAKER_VOLUME_MASK 0x06

#define WS_SOUND_NOISE_LFSR_PORT 0x92

#define WS_SOUND_VOICE_VOL_PORT 0x94
/**
 * Channel 2 left voice volume: 0%.
 */
#define WS_SOUND_VOICE_VOL_LEFT_NONE 0x00
/**
 * Channel 2 left voice volume: 50%.
 */
#define WS_SOUND_VOICE_VOL_LEFT_HALF 0x08
/**
 * Channel 2 left voice volume: 100%.
 */
#define WS_SOUND_VOICE_VOL_LEFT_FULL 0x0C
#define WS_SOUND_VOICE_VOL_LEFT_SHIFT 2
#define WS_SOUND_VOICE_VOL_LEFT_MASK 0x0C
/**
 * Channel 2 right voice volume: 0%.
 */
#define WS_SOUND_VOICE_VOL_RIGHT_NONE 0x00
/**
 * Channel 2 right voice volume: 50%.
 */
#define WS_SOUND_VOICE_VOL_RIGHT_HALF 0x02
/**
 * Channel 2 right voice volume: 100%.
 */
#define WS_SOUND_VOICE_VOL_RIGHT_FULL 0x03
#define WS_SOUND_VOICE_VOL_RIGHT_SHIFT 0
#define WS_SOUND_VOICE_VOL_RIGHT_MASK 0x03

/**
 * Sound test port.
 */
#define WS_SOUND_TEST_PORT 0x95
#define WS_SOUND_TEST_HOLD_CH 0x01
/**
 * Disables the sweep clock divisor, applying the sweep effect at a rate of 3072000 Hz.
 */
#define WS_SOUND_TEST_FAST_SWEEP 0x02

/**
 * Sound test port: synthesizer (channel 1-4) right channel output sample in bits 0-9.
 */
#define WS_SOUND_TEST_CHOUT_R_PORT 0x96

/**
 * Sound test port: synthesizer (channel 1-4) left channel output sample in bits 0-9.
 */
#define WS_SOUND_TEST_CHOUT_L_PORT 0x98

/**
 * Sound test port: synthesizer (channel 1-4) sum of output samples in bits 0-10.
 */
#define WS_SOUND_TEST_CHOUT_M_PORT 0x9A

/**
 * Controls the internal speaker volume.
 */
#define WS_SOUND_SPEAKER_VOL_PORT 0x9E

/**@}*/

/**
 * @addtogroup hardware_timers Hardware defines - Timer control I/O ports
 * @{
 */

#define WS_TIMER_CTRL_PORT 0xA2
/**
 * Disable vertical blank timer.
 */
#define WS_TIMER_CTRL_VBL_DISABLE 0x00
/**
 * Enable vertical blank timer; trigger once, then stop.
 */
#define WS_TIMER_CTRL_VBL_ONESHOT 0x04
/**
 * Enable vertical blank timer; repeat continuously.
 */
#define WS_TIMER_CTRL_VBL_REPEAT 0x0C
#define WS_TIMER_CTRL_VBL_SHIFT 2
#define WS_TIMER_CTRL_VBL_MASK 0x0C
#define WS_TIMER_CTRL_VBL_REPEAT_BIT 0x08
#define WS_TIMER_CTRL_VBL_ENABLE_BIT 0x04
/**
 * Disable horizontal blank timer.
 */
#define WS_TIMER_CTRL_HBL_DISABLE 0x00
/**
 * Enable horizontal blank timer; trigger once, then stop.
 */
#define WS_TIMER_CTRL_HBL_ONESHOT 0x01
/**
 * Enable horizontal blank timer; repeat continuously.
 */
#define WS_TIMER_CTRL_HBL_REPEAT 0x03
#define WS_TIMER_CTRL_HBL_SHIFT 0
#define WS_TIMER_CTRL_HBL_MASK 0x03
#define WS_TIMER_CTRL_HBL_REPEAT_BIT 0x02
#define WS_TIMER_CTRL_HBL_ENABLE_BIT 0x01

/**
 * Reload value for horizontal blank timer.
 */
#define WS_TIMER_HBL_RELOAD_PORT 0xA4

/**
 * Reload value for vertical blank timer.
 */
#define WS_TIMER_VBL_RELOAD_PORT 0xA6

/**
 * Current counter value for horizontal blank timer.
 */
#define WS_TIMER_HBL_COUNTER_PORT 0xA8

/**
 * Current counter value for vertical blank timer.
 */
#define WS_TIMER_VBL_COUNTER_PORT 0xAA

/**@}*/

/**
 * @addtogroup hardware_uart Hardware defines - UART I/O ports
 * @{
 */

#define WS_UART_DATA_PORT 0xB1

#define WS_UART_CTRL_PORT 0xB3
/**
 * Enable UART serial in EXT port.
 */
#define WS_UART_CTRL_ENABLE 0x80
/**
 * Clock UART port at 9600 baud.
 */
#define WS_UART_CTRL_BAUD_9600 0x00
/**
 * Clock UART port at 38400 baud.
 */
#define WS_UART_CTRL_BAUD_38400 0x40
#define WS_UART_CTRL_BAUD_SHIFT 6
#define WS_UART_CTRL_BAUD_MASK 0x40
/**
 * Reset the RX overrun flag.
 */
#define WS_UART_CTRL_RX_OVERRUN_RESET 0x20
/**
 * UART TX ready - the data port can be written with a new byte.
 */
#define WS_UART_CTRL_TX_READY 0x04
/**
 * UART RX overrun - a second byte was received before the first byte was read out.
 */
#define WS_UART_CTRL_RX_OVERRUN 0x02
/**
 * UART RX ready - the data port can have a new byte read from.
 */
#define WS_UART_CTRL_RX_READY 0x01

/**@}*/

#endif /* WS_PORTS_H_ */

